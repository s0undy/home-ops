global
    daemon
    maxconn 256

defaults
    mode tcp
    timeout connect 4s
    timeout client 30s
    timeout server 30s
    retry-on all-retryable-errors

resolvers cluster_ns
    parse-resolv-conf

    hold valid    10s
    hold other    30s
    hold refused  30s
    hold nx       30s
    hold timeout  30s
    hold obsolete 30s

    resolve_retries 3
    timeout retry 1s
    timeout resolve 1s

frontend http
    bind :8080
    http-request use-service prometheus-exporter if { path /metrics }
    default_backend stats

backend stats
    mode http
    stats enable
    stats uri /
    stats refresh 5s
    stats show-legends
    stats admin if TRUE

resolvers k8s
    parse-resolv-conf
    hold other           10s
    hold refused         10s
    hold nx              10s
    hold timeout         10s
    hold valid           10s
    hold obsolete        10s

#Kollar om redis-backends är uppe
frontend redis-read
    bind *:6380
    default_backend redis-online

#Endast en uppe åt gången, main interface
frontend redis-write
    bind *:6379
    acl authentik hdr_sub(host) -i redis-lb-authentik.databases.svc.cluster.local
    acl primary hdr_sub(host) -i redis-lb.databases.svc.cluster.local
    use_backend redis-authentik-primary if authentik
    use_backend redis-primary if nextcloud
    default_backend redis-primary

#Sentinel för cluster state
frontend redis-sentinel
    bind *:26379
    default_backend redis-sentinel

#Endast en uppe åt gången, main interface
backend redis-primary
    balance first
    option tcp-check
    tcp-check connect port 6379
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    server redis-0 redis-node-0.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-1 redis-node-1.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-2 redis-node-2.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns

#Kollar om redis-backends är uppe
backend redis-online
    balance roundrobin
    option tcp-check
    tcp-check connect port 6379
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    server redis-0 redis-node-0.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-1 redis-node-1.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-2 redis-node-2.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns

#Sentinel för cluster state
backend redis-sentinel
    balance roundrobin
    option tcp-check
    tcp-check connect port 26379
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    server redis-0 redis-node-0.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-1 redis-node-1.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-2 redis-node-2.redis-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns


# authentik-redis config
# authentik-redis config
#Endast en uppe åt gången, main interface
backend redis-authentik-primary
    balance first
    option tcp-check
    tcp-check connect port 6379
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    server redis-authentik-node-0 redis-authentik-node-0.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-authentik-node-1 redis-authentik-node-1.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-authentik-node-2 redis-authentik-node-2.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns

#Kollar om redis-backends är uppe
backend redis-authentik-online
    balance roundrobin
    option tcp-check
    tcp-check connect port 6379
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    server redis-authentik-node-0 redis-authentik-node-0.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-authentik-node-1 redis-authentik-node-1.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-authentik-node-2 redis-authentik-node-2.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns

#Sentinel för cluster state
backend redis-authentik-sentinel
    balance roundrobin
    option tcp-check
    tcp-check connect port 26379
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    server redis-authentik-node-0 redis-authentik-node-0.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-authentik-node-1 redis-authentik-node-1.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
    server redis-authentik-node-2 redis-authentik-node-2.redis-authentik-headless.databases.svc.cluster.local check inter 5s resolvers cluster_ns
